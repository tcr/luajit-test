#include <stdint.h>

// DynASM directives.
|.arch thumb
|.actionlist actions

#include "test.h"


/*

int fib (int n)
{
  int i = 2;
  int f1 = 0;
  int f2 = 1;
  int fn = 0;
  for (i = 2; i < n; i++) {
    fn = f1 + f2;
    f1 = f2;
    f2 = fn;
  }
  return fn;
}

*/

int fib (int n)
{
  __asm__ (
"  push {r4}\n\t"
"  cmp r0, #2\n\t"
"  ble.w fib_2\n\t"
"  movs r2, #1\n\t"
"  movs r4, #0\n\t"
"  movs r3, #2\n\t"
"fib_1:\n\t"
"  adds   r1, r4, r2\n\t"
"  adds  r3, #1\n\t"
"  cmp r3, r0\n\t"
"  beq.w fib_3\n\t"
"  mov r4, r2\n\t"
"  mov r2, r1\n\t"
"  b.w fib_1\n\t"
"fib_2:\n\t"
"  mov.w r1, #0\n\t"
"fib_3:\n\t"
"  mov r0, r1\n\t"
"  ldr r4, [sp], #4\n\t"
"  bx  lr\n\t"
  );
}

void fib_test (int (*fn)(int))
{
  assert(fn(10) == 34);
  assert(fn(4) == 2);
  assert(fn(0) == 0);
  assert(fn(3) == 1);
}

TEST_JIT(fib, int (*)(int),
{
  | push {r4}
  | cmp r0, #2
  | ble >2
  | movs r2, #1
  | movs r4, #0
  | movs r3, #2
  |1:
  | adds   r1, r4, r2
  | adds  r3, #1
  | cmp r3, r0
  | beq >3
  | mov r4, r2
  | mov r2, r1
  | b <1
  |2:
  | mov.w r1, #0
  |3:
  | mov r0, r1
  | ldr r4, [sp], #4
  | bx  lr
})


void run_test ()
{
  printf("1..1\n");
  fib_jit();
}
