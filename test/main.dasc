#include <stdint.h>

// DynASM directives.
|.arch thumb
|.actionlist actions

#include "test.h"




int cmp (int n)
{
	if (n > 5) {
		return 1;
	}
	return 0;
}

void cmp_test (int (*fn)(int))
{
	assert(fn(1) == 0);
	assert(fn(5) == 0);
	assert(fn(10) == 1);
}

TEST_JIT(cmp, int (*)(int),
{
	// The run-time value of C variable "num" is substituted
  	// into the immediate value of the instruction.
  	|.type num, int, r0
	| cmp num, #5
	| ite le
	| movle r0, #0
	| movgt r0, #1
	| bx  lr
	| nop
})



int mul (int a, int b)
{
	__asm__ (
	"mul.w r0, r1, r0\n\t"
	);
	// return a * b;
}

void mul_test (int (*fn)(int, int))
{
	assert(fn(2, 3) == 6);
	assert(fn(4, 12) == 48);
}

TEST_JIT(mul, int (*)(int, int),
{
	| mul.w r0, r1, r0
	| bx    lr
	| nop
})







COMPARE_JIT(arith,
__asm__ (
	"add.w r2, r3, #1\n\t"
	"add.w r2, r3, r4\n\t"
	"adds.w r2, r3, #1\n\t"
	"adds.w r2, r3, r4\n\t"
	"mul.w r0, r1, r0\n\t"
	"mul.w r2, r3, r2\n\t"
	"mov r4, r2\n\t"
	"subs r0, r1, #2\n\t"
	"sub r0, r0, #8\n\t"
	"add r1, r2, r3, lsl #2\n\t"
	"sub r0, r2, #0x20000\n\t"
	"sub r6, r11, #0x20000\n\t"
), {
	| add.w r2, r3, #1
	| add.w r2, r3, r4
	| adds.w r2, r3, #1
	| adds.w r2, r3, r4
	| mul.w r0, r1, r0
	| mul.w r2, r3, r2
	| mov r4, r2
	| subs r0, r1, #2
	| sub r0, r0, #8
	| add r1, r2, r3, lsl #2
	| sub r0, r2, #0x20000
	| sub r6, r11, #0x20000
})

int REGS_LSL = 24;


COMPARE_JIT(regs,
__asm__ (
	"ldr r3, [r3, #4]\n\t"
	"ldr r3, [r3, #5]\n\t"
	"ldr r3, [r4, #-4]\n\t"
	"sub r0, r0, r1, lsl #5\n\t"
	"sub r0, r0, r1, lsl #24\n\t"
	"sub r0, r0, r1, lsl #24\n\t"
), {
	| ldr r3, [r3, #4]
	| ldr r3, [r3, #5]
	| ldr r3, [r4, #-4]
	| sub r0, r0, r1, lsl #5
	| sub r0, r0, r1, lsl #24
	| sub r0, r0, r1, lsl #REGS_LSL
})



typedef struct {
	uint8_t number;
} simple_t;

void struct_jit()
{
	dasm_State *state;
	simple_t a = { 0 };
	simple_t* ptr = &a;
	ptr->number = 5;

    |.type a,		simple_t,	r0
	| ldr r0, a->number
}



int SOMETHING = 1;
int SOMETHING2 = 0x2C002C;

COMPARE_JIT(immtest,
__asm__ (
	"add.w r0, r0, #1\n\t"
	"add.w r0, r0, #0x2C002C\n\t"
), {
	| add.w r0, r0, #SOMETHING
	| add.w r0, r0, #SOMETHING2
})



void sub_neg ()
{
__asm__ (
	"add r6, #-255"
);
}




int main ()
{
	printf("# START.\n\n");

	printf("1..5\n");
	cmp_jit();
	mul_jit();
	arith_jit();
	struct_jit();
	regs_jit();
	immtest_jit();

	printf("# FINISHED.\n");

	return 0;
}
