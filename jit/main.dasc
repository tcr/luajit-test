// Includes
#include <stdint.h>
#include <stdio.h>
#include <assert.h>
#include <dasm_proto.h>
#include <dasm_arm.h>

// Most basic DynASM JIT; generates a trivial function that
// returns a given value, and executes it.

// DynASM directives.
|.arch arm
|.actionlist actions

// This define affects "|" DynASM lines.  "Dst" must
// resolve to a dasm_State** that points to a dasm_State*.
#define Dst &state


int cmp (int n);

static void jit_init (dasm_State** state)
{
	printf("# JIT_INIT.\n");
	dasm_init(state, 1);
	dasm_setupglobal(state, (void **)malloc(32*sizeof(void *)), 32);
	dasm_setup(state, actions);
	assert(state != 0);
}

static void* jit_build (dasm_State** state, size_t* size)
{
	printf("# JIT_LINK.\n");
	// Link the code and write it to executable memory.
	int dasm_status = dasm_link(state, size);
	assert(*size != 0);
	assert(dasm_status == DASM_S_OK);
	void *code = calloc(1, *size);

	printf("# JIT_ENCODE.\n");
	dasm_encode(state, code);
	dasm_free(state);
	return code;
}

static int jit_compare (void* fn, void* code, size_t size)
{
	printf("# JIT_COMPARE (%d words):", size/2);
	for (int i = 0; i < size/2; i++) {
		if (((uint16_t*) code)[i] != ((uint16_t*) fn)[i]) {
			printf(" failed! word %d/%d: %04x isn't %04x\n", i, size/2, ((uint16_t*) code)[i], ((uint16_t*) fn)[i]);
			return 1;
		}
	}
	printf(" succeeded.\n");
	return 0;
}

static void jit_dump (void* code, size_t size)
{
	printf("# JIT_DUMP\n");
	// Dump generated code.
	for (int i = 0; i < size/2; i++) {
		printf(";;; %04x\n", ((uint16_t *) code)[i]);
	}
}

static void jit_free (void *code)
{
	printf("# JIT_DONE.\n\n");
	free(code);
}

#define TEST_JIT(A, T, ASM) \
void A ## _jit (void) \
{ \
	dasm_State *state; \
	size_t size = 0; \
	void* code; \
\
	printf("# TEST [%s]\n", #A); \
	A ## _test(A); \
	jit_init(&state); \
\
 	ASM; \
\
	code = jit_build(&state, &size); \
	if (jit_compare((uint32_t) A - 1, code, size) != 0) \
		jit_dump(code, size); \
	printf("# JIT TEST.\n"); \
	A ## _test(((T) (code+1))); \
	jit_free(code); \
}








int ARNGNG (int n)
{
	if (n > 5) {
		return 1;
	}
	return 0;
}


int cmp (int n)
{
	if (n > 5) {
		return 1;
	}
	return 0;
}

void cmp_test (int (*fn)(int))
{
	assert(fn(1) == 0);
	assert(fn(5) == 0);
	assert(fn(10) == 1);
}

TEST_JIT(cmp, int (*)(int),
{
	// The run-time value of C variable "num" is substituted
  	// into the immediate value of the instruction.
  	|.type num, int, r0
	| cmp num, #5
	| ite le
	| mov r0, #0
	| mov r0, #1
	| bx  lr
	| nop
})







int fib (int n)
{
	int i = 2;
	int f1 = 0;
	int f2 = 1;
	int fn = 0;
	for (i = 2; i < n; i++) {
		fn = f1 + f2;
		f1 = f2;
		f2 = fn;
	}
	return fn;
}

void fib_test (int (*fn)(int))
{
	assert(fn(10) == 34);
	assert(fn(4) == 2);
	assert(fn(0) == 0);
	assert(fn(3) == 1);
}

TEST_JIT(fib, int (*)(int),
{
	| push {r4}
	| cmp r0, #2
	| it  le
	| mov r1, #0
	| ble >2
	| mov.w r2, #1
	| mov.w r4, #0
	| mov.w r3, #2
	|1:
	| adds   r1, r4, r2
	| add.w  r3, r3, #1
	| mov r4, r2
	| mov r2, r1
	| cmp r3, r0
	| bne <1
	|2:
	| mov r0, r1
	| pop {r4}
	| bx  lr
	| nop
})










int main ()
{
	printf("# START.\n\n");

	fib_jit();
	cmp_jit();

	printf("# FINISHED.\n");

	return 0;
}
